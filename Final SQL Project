/*Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to")*/
SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE Country != "USA"
ORDER BY Country, LastName;

/*Show only the Customers from Brazil*/
SELECT *
FROM chinook.customers
WHERE Country = "Brazil"
ORDER BY LastName;

/*Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country*/
SELECT c.FirstName, c.LastName, i.InvoiceID, i.InvoiceDate, i.BillingCountry
FROM chinook.invoices i
LEFT JOIN chinook.customers c
ON i.CustomerId = c.CustomerID
WHERE i.BillingCountry = "Brazil"
ORDER BY i.InvoiceDate;

/*Show the Employees who are Sales Agents*/
SELECT *
FROM chinook.employees
WHERE Title = "Sales Support Agent";

/*Find a unique/distinct list of billing countries from the Invoice table*/
SELECT DISTINCT BillingCountry
FROM chinook.invoices;

/*Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name*/
SELECT e.FirstName, e.LastName, i.InvoiceId
FROM chinook.employees e
JOIN chinook.customers c ON c.SupportRepId=e.EmployeeID
JOIN chinook.invoices i ON i.CustomerId=c.CustomerID
ORDER BY e.LastName;

/*Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers*/
SELECT c.FirstName, c.LastName, c.Country, i.total, e.FirstName||' '||e.LastName AS SalesAgent
FROM chinook.customers c
JOIN chinook.invoices i ON c.CustomerID=i.CustomerID
JOIN chinook.employees e ON c.SupportRepId=e.EmployeeID
ORDER BY c.LastName;

/*How many Invoices were there in 2009?*/
SELECT COUNT(*)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

/*What are the total sales for 2009?*/
SELECT SUM(Total)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

/*Write a query that includes the purchased track name with each invoice line ID.*/
SELECT t.Name, i.InvoiceLineId
FROM chinook.invoice_items i
JOIN chinook.tracks t ON i.TrackdId=t.TrackId
ORDER BY i.InvoiceLineID;

/*Write a query that includes the purchased track name AND artist name with each invoice line ID.*/
SELECT t.Name AS Track, ar.Name AS Artist, i.InvoiceLineId
FROM chinook.invoice_items i
LEFT JOIN chinook.tracks t ON i.TrackId=t.TrackId
INNER JOIN chinook.albums al ON t.AlbumId=al.AlbumId
LEFT JOIN chinook.artists ar ON al.ArtistID=ar.ArtistId
ORDER BY Artist, Track;

/*Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.*/
SELECT t.Name AS 'Track Name', a.Title AS 'Album Title', m.Name AS 'Media Type', g.Name AS 'Genre'
FROM chinook.tracks t
JOIN chinook.Albums a on a.AlbumId = t.AlbumId
JOIN chinook.Media_Types m on m.MediaTypeId = t.MediaTypeId
JOIN chinook.Genres g on g.GenreId = t.GenreId;

/*Show the total sales made by each sales agent.*/
SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp
JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;

/*Which sales agent made the most dollars in sales in 2009?*/
SELECT e.FirstName, e.LastName, ROUND(SUM(i.total), 2) AS 'Total Sales'
FROM chinook.employees e
JOIN chinook.Customers c
ON c.SupportRepId = e.EmployeeId
JOIN chinook.Invoices i 
ON i.CustomerId = c.CustomerId
WHERE e.Title = 'Sales Support Agent'
AND i.InvoiceDate LIKE '2009%'
GROUP BY e.LastName 
ORDER BY ROUND(SUM(i.total), 2) DESC LIMIT 1;

/*Show customers, their sales total, and create a CASE for the 'Sale Size'*/
SELECT c.FirstName, c.LastName, ROUND(SUM(i.total), 2) AS 'Total Sales',
CASE WHEN ROUND(SUM(i.total), 2) <= 38 THEN "Low"
     WHEN ROUND(SUM(i.total), 2) <= 42 THEN "Medium"
     WHEN ROUND(SUM(i.total), 2) <= 50 THEN "High" END SaleSize
FROM chinook.invoices i
JOIN chinook.customers c
ON c.CustomerId=i.CustomerId
GROUP BY c.Lastname, c.FirstName
ORDER BY ROUND(SUM(i.total), 2) DESC;
